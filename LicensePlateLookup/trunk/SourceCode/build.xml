<?xml version="1.0" encoding="UTF-8" ?>
<project xmlns="antlib:org.apache.tools.ant" name="ApplicationBuild" default="" basedir=".">
    <!--
    This is the ant build file for the Application-level 
    -->
    <property file="${basedir}/build.properties"/>
    <property name="version.file" location="${basedir}/build.properties"/>
    <property name="wldeploy.lib.dir" location="c:/Development/Tools/Weblogic/wldeploy"/>
    <!-- Archive file names -->
    <property name="modelArchive" value="EJBModel.jar"/>
    <property name="servicesArchive" value="RESTServices.war"/>
    <property name="applicationArchive" value="${project.name}.ear"/>
    <!-- Build timestamp -->
    <tstamp>
        <format property="build_date_time" pattern="EEE, MMM dd, yyyy hh:mm:ss a z" locale="en,US"/>
    </tstamp>

    <path id="Logging.jar">
        <pathelement location="../lib/log4j-1.2.15.jar"/>
        <pathelement location="../lib/Logger.jar"/>
    </path>

    <target name="all" description="Build the entire application" depends="clean,model,services,copy"/>
    <target name="clean" description="Clean the project" unless="cleanDone">
        <echo>Cleaning RESTServices...</echo>
        <ant target="clean" dir="${basedir}/RESTServices" antfile="build.xml"/>
        <echo>Cleaning EJBModel...</echo>
        <ant target="clean" dir="${basedir}/EJBModel" antfile="build.xml"/>
        <echo>Cleaning Application...</echo>
        <delete includeemptydirs="true" quiet="true">
            <fileset dir="${build.dir}" includes="**/*"/>
            <fileset dir="${dev.dir}" includes="**/*"/>
            <fileset dir="${cert.dir}" includes="**/*"/>
            <fileset dir="${prod.dir}" includes="**/*"/>
            <fileset dir="${expand.jar.dir}" includes="**/*"/>
            <fileset dir="${expand.war.dir}" includes="**/*"/>
        </delete>
        <echo>Cleaning... ${basedir}\${build.dir}</echo>
        <delete dir="${build.dir}"/>
        <echo>Cleaning... ${basedir}\${dev.dir}</echo>
        <delete dir="${dev.dir}"/>
        <echo>Cleaning... ${basedir}\${cert.dir}</echo>
        <delete dir="${cert.dir}"/>
        <echo>Cleaning... ${basedir}\${prod.dir}</echo>
        <delete dir="${prod.dir}"/>
        <echo>Cleaning... ${basedir}\${expand.jar.dir}</echo>
        <delete dir="${expand.jar.dir}"/>
        <echo>Cleaning... ${basedir}\${expand.war.dir}</echo>
        <delete dir="${expand.war.dir}"/>
        <condition property="cleanDone">
            <not>
                <available file="${build.dir}" type="dir"/>
            </not>
        </condition>
    </target>
    <!--
  ==========================================================================================
  Project Build targets
  ==========================================================================================
  -->
    <!-- Call the build.xml for the Model project -->
    <target name="model">
        <echo>Calling EJBModel ant build...</echo>
        <ant target="all" dir="${basedir}/EJBModel" antfile="build.xml">
            <property name="javac.debug" value="${javac.debug}"/>
        </ant>
        <echo message="Done"></echo>
    </target>
    <!-- Call the build.xml for the Services project -->
    <target name="services">
        <echo>Calling RESTServices ant build...</echo>
        <ant target="all" dir="${basedir}/RESTServices" antfile="build.xml">
            <property name="javac.debug" value="${javac.debug}"/>
            <property name="log.level" value="${log.level}"/>
            <property name="log.path" value="${log.basedir}"/>
            <property name="project.name" value="${project.name}"/>
        </ant>
        <echo message="Done"></echo>
    </target>
    <!--
  ==========================================================================================
  Initialization targets
  ==========================================================================================
  -->
    <target name="init" unless="initDone">
        <tstamp/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.dir}/lib"/>
        <mkdir dir="${build.dir}/META-INF"/>
        <condition property="initDone">
            <available file="${build.dir}" type="dir"/>
        </condition>
    </target>
    <target name="copy" description="Copy files to build directory" depends="init" unless="copyDone">
        <patternset id="copy.patterns">
            <include name="**/*.cpx"/>
            <include name="**/*.dcx"/>
            <include name="**/*.ejx"/>
            <include name="**/*.gif"/>
            <include name="**/*.ini"/>
            <include name="**/*.jpeg"/>
            <include name="**/*.jpg"/>
            <include name="**/*.png"/>
            <include name="**/*.properties"/>
            <include name="**/*.sva"/>
            <include name="**/*.tag"/>
            <include name="**/*.tld"/>
            <include name="**/*.wsdl"/>
            <include name="**/*.xcfg"/>
            <include name="**/*.xlf"/>
            <include name="**/*.xml"/>
            <include name="**/*.xsd"/>
            <include name="**/*.xsl"/>
            <include name="**/*.jar"/>
            <include name="**/*.war"/>
            <exclude name="build.xml"/>
            <exclude name="build.properties"/>
        </patternset>
        <copy todir="${build.dir}/lib">
            <fileset dir="lib">
                <patternset refid="copy.patterns"/>
            </fileset>
        </copy>
        <copy todir="${build.dir}/META-INF">
            <fileset dir="${basedir}/src/META-INF">
                <patternset refid="copy.patterns"/>
            </fileset>
        </copy>
        <copy todir="${build.dir}">
            <fileset dir="${basedir}/EJBModel/${dist.dir}">
                <patternset refid="copy.patterns"/>
            </fileset>
        </copy>
        <copy todir="${build.dir}">
            <fileset dir="${basedir}/RESTServices/${dist.dir}">
                <patternset refid="copy.patterns"/>
            </fileset>
        </copy>
        <condition property="copyDone">
            <available file="${build.dir}/WEB-INF/lib/*.jar" type="file"/>
        </condition>
    </target>
    
    
  <!--
  ==========================================================================================
  Application Version Increment targets
  ==========================================================================================
  -->  
    <target name="newMajorRelease" depends="resetIncrementMajor, inc.build"/>
    <target name="newMinorRelease" depends="resetIncrementMinor, inc.build"/>

    <!--
  ==========================================================================================
  Build targets
  ==========================================================================================
  -->
    <!-- 
        Create EAR file 
        
        Targets:
          buildAppMajor - Increments the major release number. Resets the minor to 0 and the build increment to 1.
          buildAppMinor - Increments the minor release number. Resets the build increment to 1.
          buildApp      - Increments the build number. This is the default build target.
        -->
    <!-- Local Version -->
    <target name="createEARLocal" depends="inc.build, setLocal, all">
        <echo>Creating EAR for Local machine...</echo>
        <property name="deploy.dir" value="${dev.dir}"/>
        <condition property="properlyCalled">
            <isset property="deploy.dir"/>
        </condition>
        <antcall target="createEAR"/>
    </target>
    <!-- DEV Version -->
    <target name="createEARDev" depends="inc.build, setDev, all">
        <echo>Creating EAR for DEV...</echo>
        <mkdir dir="${dev.dir}"/>
        <property name="deploy.dir" value="${dev.dir}"/>
        <condition property="properlyCalled">
            <isset property="deploy.dir"/>
        </condition>
        <antcall target="createEAR"/>
    </target>
    <!-- CERT Version -->
    <target name="createEARCert" depends="inc.build, setCert, all">
        <echo>Creating EAR for CERT...</echo>
        <mkdir dir="${cert.dir}"/>
        <property name="deploy.dir" value="${cert.dir}"/>
        <condition property="properlyCalled">
            <isset property="deploy.dir"/>
        </condition>
        <antcall target="createEAR"/>
    </target>
    <!-- PROD Version -->
    <!-- 
	Create archive file for PROD environment.  This relies on a previous CERT build.
	The CERT build files are used while the manifest and property files are revised
	to reflect PROD-centric information.
    -->
    <target name="createEARProd" depends="check4CertArchive, setProd">
        <echo message="Creating EAR for PROD from CERT EAR..." />
        <fail unless="certArchiveExists"
              message="*** Deploy failed!  No CERT archive available to create PROD version."/>
        <!-- Clean build dir of current contents-->
        <delete dir="${build.dir}"/>
        <delete dir="${expand.jar.dir}"/>
        <delete dir="${expand.war.dir}"/>
        <delete dir="${prod.dir}"/>
        <mkdir dir="${expand.war.dir}"/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${prod.dir}"/>
        <mkdir dir="${expand.jar.dir}"/>
        <mkdir dir="${expand.war.dir}"/>
        <!-- Unzip CERT EAR -->
        <echo>Expanding ${cert.dir}/${applicationArchive} into ${build.dir}...</echo>
        <unzip src="${cert.dir}/${applicationArchive}" dest="${build.dir}"/>
        <!-- Unzip EJBModel.jar -->
        <echo>Expanding ${build.dir}/${modelArchive} into ${expand.jar.dir}...</echo>
        <unzip src="${build.dir}/${modelArchive}" dest="${expand.jar.dir}"/>
        <!-- Unzip RESTServices.jar -->
        <echo>Expanding ${build.dir}/${servicesArchive} into ${expand.war.dir}...</echo>
        <unzip src="${build.dir}/${servicesArchive}" dest="${expand.war.dir}"/>
        <!-- Over-write files with corresponding PROD versions -->
        <echo>Over-writing some files with their PROD version...</echo>
        <!-- Create a PROD-environment version of log4j.xml -->
        <copy file="${basedir}/RESTServices/public_html/WEB-INF/classes/log4j.xml" tofile="${build.dir}/WEB-INF/classes/log4j.xml" overwrite="true">
            <filterset>
                <filter token="application_name" value="${project.name}"/>
            </filterset>
            <filterset>
                <filter token="log_basedir" value="${prod.log.basedir}"/>
            </filterset>
            <filterset>
                <filter token="log_level" value="${prod.log.level}"/>
            </filterset>
        </copy>
        <manifest file="${build.dir}/META-INF/MANIFEST.MF">
            <attribute name="Built-By" value="${user.name}"/>
            <attribute name="Weblogic-Application-Version" value="${application.version}"/>
            <attribute name="Destination" value="${destination}"/>
            <attribute name="Jenkins-Build-Number" value="${build.number}"/>
            <attribute name="Build-Date" value="${build_date_time}"/>
        </manifest>
        <copy file="${build.dir}/WEB-INF/classes/log4j.xml" tofile="${expand.jar.dir}/log4j.xml" overwrite="true"/>
        <copy file="${build.dir}/WEB-INF/classes/log4j.xml" tofile="${expand.war.dir}/log4j.xml" overwrite="true"/>
        <delete file="${build.dir}/${modelArchive}"/>
        <delete file="${build.dir}/${servicesArchive}"/>
        <!-- Compress JAR and WAR -->
        <echo>Re-Compressing ${modelArchive} and ${servicesArchive} </echo>
        <jar destfile="${build.dir}/${modelArchive}">
            <fileset dir="${expand.jar.dir}">
                <include name="com/rtddenver/**"/>
                <include name="META-INF/**"/>
                <include name="log4j.xml"/>
            </fileset>
        </jar>
        <war destfile="${build.dir}/${servicesArchive}" webxml="${expand.war.dir}/WEB-INF/web.xml"
             manifest="${expand.war.dir}/META-INF/MANIFEST.MF">
            <fileset dir="${expand.war.dir}">
                <include name="WEB-INF/**"/>
            </fileset>
            <fileset dir="${build.dir}">
                <include name="META-INF/**"/>
            </fileset>
        </war>
        <!-- Compress back into EAR -->
        <echo>Creating PROD EAR (${prod.dir}/${applicationArchive})...</echo>
        <war destfile="${prod.dir}/${applicationArchive}" webxml="${basedir}/RESTServices/public_html/WEB-INF/web.xml"
             manifest="${build.dir}/META-INF/MANIFEST.MF">
            <fileset dir="${build.dir}"/>
        </war>
    </target>
    <!--
        This is the main target for creating the EAR.
        This should not be called directly. But, rather via createEARDev, createEARCert, createEARProd.
    -->
    <target name="createEAR" depends="">
        <fail unless="properlyCalled"
              message="*** createEAR failed!  Call via createEARDev, createEARCert, or createEARProd"/>
        <echo>Building the ear file...</echo>
        <manifest file="${build.dir}/META-INF/MANIFEST.MF">
            <attribute name="Built-By" value="${user.name}"/>
            <attribute name="Weblogic-Application-Version" value="${application.version}"/>
            <attribute name="Destination" value="${destination}"/>
            <attribute name="Jenkins-Build-Number" value="${build.number}"/>
            <attribute name="Build-Date" value="${build_date_time}"/>
        </manifest>
        <ear destfile="${deploy.dir}/${applicationArchive}" appxml="${basedir}/src/META-INF/application.xml"
             manifest="${build.dir}/META-INF/MANIFEST.MF">
            <fileset dir="${build.dir}">
                <include name="META-INF/weblogic-application.xml"/>
            </fileset>
            <fileset dir="${build.dir}">
                <include name="/lib/**"/>
            </fileset>
            <fileset dir="${build.dir}">
                <include name="**/${modelArchive}"/>
            </fileset>
            <fileset dir="${build.dir}">
                <include name="**/${servicesArchive}"/>
            </fileset>
        </ear>
        <echo message="Done"></echo>
    </target>
    <!--
  ==========================================================================================
  Utility targets
  ==========================================================================================
  -->
    <target name="check4Archive">
        <condition property="archiveExists">
            <available file="${basedir}\${dev.dir}\${applicationArchive}" type="file"/>
        </condition>
        <echo message="Done"></echo>
    </target>
    <target name="check4CertArchive">
        <echo>Looking for archive: ${basedir}\${cert.dir}\${applicationArchive}</echo>
        <condition property="certArchiveExists">
            <available file="${basedir}\${cert.dir}\${applicationArchive}" type="file"/>
        </condition>
        <echo message="Done"></echo>
    </target>
    <target name="setLocal">
        <property name="javac.debug" value="${local.javac.debug}"/>
        <property name="log.level" value="${local.log.level}"/>
        <property name="log.basedir" value="${local.log.basedir}"/>
        <property name="district.svc.url" value="${local.district.svc.url}"/>
        <property name="destination" value="DEV LOCAL"/>
    </target>
    <target name="setDev">
        <property name="javac.debug" value="${dev.javac.debug}"/>
        <property name="log.level" value="${dev.log.level}"/>
        <property name="log.basedir" value="${dev.log.basedir}"/>
        <property name="district.svc.url" value="${dev.district.svc.url}"/>
        <property name="destination" value="DEV"/>
    </target>
    <target name="setCert">
        <property name="javac.debug" value="${cert.javac.debug}"/>
        <property name="log.level" value="${cert.log.level}"/>
        <property name="log.basedir" value="${cert.log.basedir}"/>
        <property name="district.svc.url" value="${cert.district.svc.url}"/>
        <property name="destination" value="CERT"/>
    </target>
    <target name="setProd">
        <property name="javac.debug" value="${prod.javac.debug}"/>
        <property name="log.level" value="${prod.log.level}"/>
        <property name="log.basedir" value="${prod.log.basedir}"/>
        <property name="district.svc.url" value="${prod.district.svc.url}"/>
        <property name="destination" value="PROD"/>
    </target>
    <!--
  ==========================================================================================
  Build Numbering targets 
  ==========================================================================================
  -->
    <target name="inc.build" depends="inc.major, inc.minor, inc.revision, inc.application.version"></target>
    <!-- -->
    <target name="resetIncrementMinor">
        <propertyreset name="increment.minor" value="true"/>
    </target>
    <!-- -->
    <target name="resetIncrementMajor">
        <propertyreset name="increment.major" value="true"/>
    </target>
    <!-- -->
    <target name="inc.major" depends="inc.major.properties" if="${increment.major}"></target>
    <!-- -->
    <target name="inc.minor" depends="inc.major, inc.minor.properties" if="${increment.minor}"></target>
    <!-- -->
    <target name="inc.revision" depends="inc.major, inc.minor, inc.revision.properties" if="${increment.revision}"></target>
    <!-- -->
    <!-- Next three targets update the build numbers in the properties file -->
    <target name="inc.revision.properties" if="${increment.revision}">
        <echo>Incrementing build.revision.number...</echo>
        <math operation="+" operator1="${build.revision.number}" operator2="1" result="newRevision"/>
        <echo>newRevision=${newRevision}</echo>
        <propertyfile file="${version.file}">
            <entry key="build.major.number" default="0" operation="=" type="int"/>
            <entry key="build.minor.number" default="0" operation="=" type="int"/>
            <entry key="build.revision.number" default="0" operation="+" type="int"/>
            <entry key="increment.revision" value="true" type="string"/>
        </propertyfile>
        <propertyreset name="build.revision.number" value="${newRevision}"/>
        <propertyreset name="date.last.incremented" value="${build_date_time}"/>
    </target>
    <!-- -->
    <target name="inc.minor.properties" if="${increment.minor}">
        <echo>Incrementing build.minor.number...</echo>
        <property name="increment.revision" value="false"/>
        <math operation="+" operator1="${build.minor.number}" operator2="1" result="newMinor"/>
        <echo>new build.minor.number=${newMinor}</echo>
        <propertyfile file="${version.file}">
            <entry key="build.major.number" default="0" operation="=" type="int"/>
            <entry key="build.minor.number" default="0" operation="+" type="int"/>
            <entry key="build.revision.number" value="0" operation="=" type="int"/>
            <entry key="increment.minor" value="false" type="string"/>
            <entry key="date.last.incremented" value="${build_date_time}" type="string"/>
        </propertyfile>
        <propertyreset name="build.minor.number" value="${newMinor}"/>
        <propertyreset name="increment.revision" value="false"/>
        <propertyreset name="increment.app.version" value="true"/>
        <propertyreset name="date.last.incremented" value="${build_date_time}"/>
    </target>
    <!-- -->
    <target name="inc.major.properties" if="${increment.major}">
        <echo>Incrementing build.major.number...</echo>
        <!--<echo>inc.major=${increment.major}, inc.minor=${increment.minor}, inc.revision=${increment.revision}</echo>-->
        <math operation="+" operator1="${build.major.number}" operator2="1" result="newMajor"/>
        <echo>new build.major.number=${newMajor}</echo>
        <propertyfile file="${version.file}">
            <entry key="build.major.number" default="0" operation="+" type="int"/>
            <entry key="build.minor.number" value="0" operation="=" type="int"/>
            <entry key="build.revision.number" value="0" operation="=" type="int"/>
            <entry key="increment.major" value="false" type="string"/>
            <entry key="date.last.incremented" value="${build_date_time}" type="string"/>
        </propertyfile>
        <propertyreset name="build.major.number" value="${newMajor}"/>
        <propertyreset name="build.minor.number" value="0"/>
        <propertyreset name="build.revision.number" value="0"/>
        <propertyreset name="increment.minor" value="false"/>
        <propertyreset name="increment.revision" value="false"/>
        <propertyreset name="increment.app.version" value="true"/>
        <propertyreset name="date.last.incremented" value="${build_date_time}"/>
    </target>
    <!-- -->
    <target name="inc.application.version" if="increment.app.version">
        <echo>Updating application.version...</echo>
        <property file="build.properties"/>
        <property name="major.number" value="${build.major.number}"/>
        <property name="minor.number" value="${build.minor.number}"/>
        <propertyreset name="application.version" value="v${major.number}.${minor.number}"/>
        <echo>new application.version=${application.version}</echo>
        <propertyfile file="${version.file}">
            <entry key="application.version" value="v${build.major.number}.${build.minor.number}" type="string"/>
        </propertyfile>
    </target>

    <!--
  ==========================================================================================
  Macros for resetting properties 
  ==========================================================================================
  -->
    <macrodef name="load.version.info">
        <sequential>
            <property file="${version.file}"/>
            <checksum file="${version.file}" property="sha1.number" algorithm="SHA" />
            <echo>Version: v${build.major.number}.${build.minor.number}.${build.revision.number}</echo>
            <echo>SHA1: ${sha1.number}</echo>
        </sequential>
    </macrodef>
    <scriptdef name="propertyreset" language="javascript" src="setProperty.js" description="Allows to assign @{property} new value">
        <attribute name="name"/>
        <attribute name="value"/>
        <!--project.setProperty(attributes.get("name"), attributes.get("value"));-->
    </scriptdef>
    <macrodef name="math">
        <attribute name="operation"/>
        <attribute name="operator1"/>
        <attribute name="operator2"/>
        <attribute name="result"/>
        <sequential>
            <script language="javascript">
		     tmp = 0;
		     switch ("@{operation}")
		     {
		      case "+" :
		       tmp = parseInt("@{operator1}") + parseInt("@{operator2}");
		       break;
		      case "-" :
		       tmp = parseInt("@{operator1}") - parseInt("@{operator2}");
		       break;
		      case "=" :
		       tmp = parseInt("@{operator1}") * parseInt("@{operator2}");
		       break;
		     }
		     project.setProperty("@{result}", tmp);
		    </script>
        </sequential>
    </macrodef>
</project>
